name: CI

on:
  push:
    branches: master
  pull_request:
    branches: '*'

env:
  CACHE_EPOCH: 1
  APP_DIR: --app-dir ./.lab

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: ["ubuntu"]
        python-version: ["3.9"]
        node-version: ["14.x"]
        lab-version: ["2"]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Select Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Select Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Cache (pip)
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-${{ hashFiles('setup.py', '.github/requirements.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-

      - name: Install Python packaging dependencies
        run: pip3 install -U --user pip wheel setuptools twine

      - name: Install Python dev dependencies
        run: pip3 install -r .github/requirements.txt

      - name: Validate Environment
        run: |
          set -eux
          pip3 freeze | tee .pip-frozen
          pip3 check

      - name: Cache (node)
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-${{ matrix.node-version }}-node-build-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-${{ matrix.node-version }}-node-build-

      - name: Install js dependencies
        run: jlpm --ignore-optional

      - name: Lint Lab Extension, etc.
        run: jlpm run lint:check

      - name: Build npm tarball
        run: mkdir dist && jlpm build && mv $(npm pack) dist

      - name: Build Python distributions
        run: python3 setup.py sdist bdist_wheel

      - name: Generate distribution hashes
        run: cd dist && sha256sum * | tee SHA256SUMS

      - name: Upload distributions
        uses: actions/upload-artifact@v2
        with:
          name: jupyter-videochat ${{ github.run_number }} dist
          path: ./dist

  test:
    needs: [build]
    name: test ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      # fail-fast: false
      matrix:
        python-version: ["3.6", "3.9"]
        os: ["ubuntu", "windows", "macos"]
        include:
          - python-version: "3.6"
            node-version: "10.x"
            artifact-glob: "*.tar.gz"
          - python-version: "3.9"
            node-version: "14.x"
            artifact-glob: "*.whl"

    defaults:
      run:
        shell: bash -l {0}
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Select Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Select Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'

    - name: cache (pip)
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: |
          ${{ env.CACHE_EPOCH }}-${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('setup.py', '.github/requirements.txt') }}
        restore-keys: |
          ${{ env.CACHE_EPOCH }}-${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: Install Python packaging dependencies
      run: |
        set -eux
        pip3 install -U --user pip wheel setuptools twine

    - name: Download distributions
      uses: actions/download-artifact@v2
      with:
        name: jupyter-videochat ${{ github.run_number }} dist
        path: ./dist

    - name: Install Python distribution
      run: |
        set -eux
        cd dist
        pip3 install -vv ${{ matrix.artifact-glob }}

    - name: Validate Python environment
      run:
        set -eux
        pip3 freeze | tee .pip-frozen
        pip3 check

    - name: Import smoke test
      run: |
        set -eux
        python3 -c "import jupyter_videochat; print(jupyter_videochat.__version__)"

    - name: Validate Server Extension
      run: |
        set -eux
        jupyter serverextension list 1>serverextensions 2>&1
        cat serverextensions
        cat serverextensions | grep "jupyter_videochat.*OK"

    - name: Cache (lab)
      uses: actions/cache@v2
      with:
        path: ./.lab
        key: |
          ${{ env.CACHE_EPOCH }}-${{ runner.os }}-${{ matrix.node-version }}-${{ matrix.lab-version }}-lab-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ env.CACHE_EPOCH }}-${{ runner.os }}-${{ matrix.node-version }}-${{ matrix.lab-version }}-

    - name: Install Lab Extension
      run: |
        set -eux
        jupyter labextension list $APP_DIR
        jupyter labextension install $APP_DIR --no-build --debug $(ls dist/jupyterlab-videochat-*.tgz)
        jupyter labextension list $APP_DIR

    - name: Build Lab
      run: |
        set -eux
        jupyter lab build $APP_DIR --debug --dev-build=False --minimize=False
        jupyter labextension list $APP_DIR

    - name: Validate Lab Extension
      run: |
        set -eux
        jupyter labextension list $APP_DIR 1>labextensions 2>&1
        cat labextensions | grep "jupyterlab-videochat.*OK"

    - name: Lab Browser check
      run: |
        python3 -m jupyterlab.browser_check $APP_DIR
